#!/usr/bin/python3
#
import os, sys
import gettext
import locale
import gi
import configparser
import random
import subprocess
import signal
import time
import threading
import getopt
import getpass

locale.setlocale(locale.LC_ALL, '')
_ = gettext.gettext

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk, GLib

global_exit = 0
no_edit = False
children = []
impath = '/usr/share/pixmaps/lproxy/'

def child_exited(sig, frame):
    global children, global_exit

    terminated = []
    if sig == signal.SIGINT or sig == signal.SIGTERM:
        global_exit = 1
        return
    elif sig != signal.SIGCHLD:
        return
    for child in children:
        retv = child.poll()
        if retv:
            terminated.append(child)
    for child in terminated:
        children.remove(child)

signal.signal(signal.SIGCHLD, child_exited)

proto_cmd = {'RDP': 'xfreerdp', 'SPICE':None}
proadd = "DEFAULT"

def DialogPassword():
    win = Gtk.Window()
    md = Gtk.Dialog(win, title=_("Please Input Password"), transient_for=win, flags=0)
    md.add_buttons(
             Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL
             )
    md.resize(400, 50)
    okButton = md.get_widget_for_response(response_id=Gtk.ResponseType.OK)
    okButton.set_can_default(True)
    okButton.grab_default()
    passwd = Gtk.Entry()
    box = md.get_content_area()
    box.add(passwd)
    passwd.show()
    passwd.set_visibility(False)
    passwd.set_activates_default(True)
    response = md.run()
    if response == Gtk.ResponseType.OK:
        pwdstr = passwd.get_text()
    else:
        pwdstr = None
    md.destroy()
    win.destroy()
    return pwdstr

def rdpcmd_list(profile):
    proto = profile['proto']
    cmd = proto_cmd[proto]
    cmdlist = [cmd]
    remote = "/v:"+profile['ip']+":"+profile['port']
    cmdlist.append(remote)
    if len(profile['domain']) > 0:
        user = '/u:' + profile['domain'] + ':' + profile['user']
    else:
        user = '/u:' + profile['user']
    cmdlist.append(user)
    for itm in profile['optarg'].split():
        cmdlist.append(itm)
    if profile['fullscreen'] == 'YES':
        cmdlist.append('/f')
    return cmdlist

def remote_connect(profile):
    global children

    if profile['proto'] != "RDP":
        errmsg = _("Protocol ") + profile['proto'] + _(" Not Implemented")
        ErrorMesg(errmsg)
        return
    cmdlist = rdpcmd_list(profile)
    passwd = DialogPassword()
    if passwd == None:
        return
    passwd += '\n'
    print(cmdlist)
    log = open(profile['logfile']+'.'+getpass.getuser(), 'a')
    conpro = subprocess.Popen(cmdlist, stdin=subprocess.PIPE, stdout=log, stderr=log,
            start_new_session=True)
    conpro.stdin.write(passwd.encode('utf-8'))
    try:
        retv = conpro.communicate(None, timeout=0.5)
    except subprocess.TimeoutExpired:
        children.append(conpro)
        conpro.stdin.close()
    log.close()

def ErrorMesg(msg):
    win = Gtk.Window()
    md = Gtk.MessageDialog(parent=win, type=Gtk.MessageType.ERROR,
            buttons=Gtk.ButtonsType.OK, message_format=msg)
    md.show()
    md.run()
    md.destroy()
    win.destroy()

class ConProfile(Gtk.Dialog):
    def __init__(self, sec, profile, edit=False):
        global no_edit

        self.win = Gtk.Window()
        super().__init__(parent=win)
        on_default = sec == 'DEFAULT'
        title = sec
        if on_default:
            if edit:
                title = _("Edit Default Profile")
            else:
                title = _("Add New Profile")
        self.set_title(title)
        self.add_button(_("_OK"), Gtk.ResponseType.OK)
        self.add_button(_("_Cancel"), Gtk.ResponseType.CANCEL)
        self.connect("response", self.on_response)
        self.set_default_response(Gtk.ResponseType.OK)
        self.response = Gtk.ResponseType.CANCEL
        self.sec = ''
        self.profile = profile

        grid = Gtk.Grid()
        grid.set_row_homogeneous(True)
        grid.set_column_homogeneous(False)
        grid.show()
        self.vbox.add(grid)

        label = Gtk.Label(label=_("Profile ID:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 0, 1, 1)
        label.show()
        self.id = Gtk.Entry()
        self.id.set_text(sec)
        self.id.set_max_length(48)
        grid.attach(self.id, 1, 0, 1, 1)
        self.id.set_editable(not no_edit)
        self.id.show()

        label = Gtk.Label(label=_("Protocol:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 1, 1, 1)
        label.show()
        hbox = Gtk.Box()
        grid.attach(hbox, 1, 1, 1, 1)
        hbox.show()
        rbtn1 = Gtk.RadioButton(label=_("SPICE"))
        rbtn1.connect("toggled", self.radio_on_selected)
        hbox.pack_start(rbtn1, True, True, 20)
        rbtn1.show()
        rbtn2 = Gtk.RadioButton(label=_("RDP"), group=rbtn1)
        rbtn2.connect("toggled", self.radio_on_selected)
        hbox.pack_start(rbtn2, True, True, 0)
        rbtn2.show()
        self.screen = Gtk.CheckButton(label=_("Full Screen"))
        hbox.pack_start(self.screen, True, True, 0)
        self.screen.show()
        try:
            fullscreen = profile['fullscreen'].upper()
        except:
            fullscreen = 'NO'
        if fullscreen == 'YES':
            self.screen.set_active(True)
        rbtn1.set_sensitive(not no_edit)
        rbtn2.set_sensitive(not no_edit)
        self.screen.set_sensitive(not no_edit)

        label = Gtk.Label(label=_("Remote IP:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 2, 1, 1)
        label.show()
        self.ip = Gtk.Entry()
        try:
            ipaddr = profile['ip']
        except:
            ipaddr = ''
        self.ip.set_text(ipaddr)
        grid.attach(self.ip, 1, 2, 1, 1)
        self.ip.set_editable(not no_edit)
        self.ip.show()

        label = Gtk.Label(label=_("Port:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 3, 1, 1)
        label.show()
        self.port = Gtk.Entry()
        try:
            port = profile['port']
        except:
            if profile['proto'] == "SPICE":
                port = "5900"
            elif profile['proto'] == "RD":
                port = "3389"
        self.port.set_text(port)
        grid.attach(self.port, 1, 3, 1, 1)
        self.port.set_editable(not no_edit)
        self.port.show()

        label = Gtk.Label(label=_("User Name:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 4, 1, 1)
        label.show()
        self.user = Gtk.Entry()
        try:
            username = profile['user']
        except:
            username = ''
        self.user.set_text(username)
        grid.attach(self.user, 1, 4, 1, 1)
        self.user.set_editable(not no_edit)
        self.user.show()

        label = Gtk.Label(label=_("Domain Name:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 5, 1, 1)
        label.show()
        self.domain = Gtk.Entry()
        try:
            domain = profile['domain']
        except:
            domain = ''
        self.domain.set_text(domain)
        grid.attach(self.domain, 1, 5, 1, 1)
        self.domain.set_editable(not no_edit)
        self.domain.show()

        label = Gtk.Label(label=_("option arg:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 6, 1, 1)
        label.show()
        self.optarg = Gtk.Entry()
        try:
            optarg = profile['optarg']
        except:
            optarg = ''
        self.optarg.set_text(optarg)
        grid.attach(self.optarg, 1, 6, 1, 1)
        self.optarg.set_editable(not no_edit)
        self.optarg.show()

        proto = profile['proto']
        if proto == "SPICE":
            rbtn1.set_active(True)
        elif proto == "RDP":
            rbtn2.set_active(True)

        label = Gtk.Label(label=_("log file:"))
        label.set_xalign(1.0)
        grid.attach(label, 0, 7, 1, 1)
        label.show()
        self.log = Gtk.Entry()
        try:
            logfile = profile['logfile']
        except:
            logfile = ''
        if len(logfile) == 0:
            logfile = os.environ['HOME'] + '/' + sec.replace('/', '-') + '-conn.log'
        if on_default:
            logfile = ''
            self.log.set_editable(False)
        self.log.set_text(logfile)
        grid.attach(self.log, 1, 7, 1, 1)
        self.log.show()

    def on_response(self, dialog, response):
        global impath

        self.response = response
        if response == Gtk.ResponseType.CANCEL:
            return

        self.sec = self.id.get_text()
        self.profile['ip'] = self.ip.get_text()
        self.profile['user'] = self.user.get_text()
        self.profile['domain'] = self.domain.get_text()
        self.profile['port'] = self.port.get_text()
        self.profile['optarg'] = self.optarg.get_text()
        self.profile['picture'] = impath + "user-" + str(random.randint(1,4)) + ".png"
        self.profile['logfile'] = self.log.get_text()
        if self.screen.get_active():
            self.profile['fullscreen'] = 'YES'
        else:
            self.profile['fullscreen'] = 'NO'

    def radio_on_selected(self, rbtn):
        if rbtn.get_active():
            self.profile['proto'] = rbtn.get_label()

    def destroy(self):
        super().destroy()
        self.win.destroy()
        
class LIcon(Gtk.EventBox):
    def __init__(self, win, sec):
        super().__init__()
        self.mwin = win
        self.sec = sec
        if sec != proadd:
            self.profile = win.conini[sec]
            btnlabel = sec
        else:
            self.profile = win.conini['DEFAULT']
            btnlabel = _("Add Profile")
        self.connect("button-press-event", self.on_event_press)
        vbox = Gtk.VBox()
        vbox.set_homogeneous(False)
        self.add(vbox)
        vbox.show()

        self.image = Gtk.Image()
        self.image.set_from_file(self.profile['picture'])
        vbox.pack_start(self.image, False, False, 0)
        self.image.show()
        self.button = Gtk.Button(label=btnlabel)
        self.button.connect("clicked", self.button_clicked)
        vbox.pack_end(self.button, False, False, 0)
        self.button.show()

        self.menu = Gtk.Menu()
        mitem = Gtk.MenuItem(label=_("View/Edit"))
        self.menu.append(mitem)
        mitem.show()
        mitem.connect("activate", self.view_edit_profile)
        mitem = Gtk.MenuItem(label=_("Remove"))
        self.menu.append(mitem)
        mitem.show()
        mitem.connect("activate", self.remove_item)

    def refresh_label(self):
        self.label.set_text(self.sec)
        self.image.set_from_file(self.profile['picture'])
        self.image.show()

    def remove_item(self, data):
        GLib.idle_add(self.mwin.remove_icon, self)
        self.mwin.conmod = 1

    def add_one_profile(self, condial):
        errmsg = ''
        if len(condial.sec) == 0:
            errmsg = _("Missing Profile ID")
        elif condial.sec.upper() == 'DEFAULT':
            errmsg = _("Profile Name Cannot be set to 'DEFAULT'")
        elif len(condial.profile['user']) == 0:
            errmsg = _("Missing User Name")
        elif len(condial.profile['ip']) == 0:
            errmsg = _("Missing Remote Host/IP")
        elif condial.sec in self.mwin.conini.sections():
            errmsg = _("Duplicate Profile Name")
        if len(errmsg) != 0:
            ErrorMesg(errmsg)
            return
                
        GLib.idle_add(self.mwin.add_icon, condial.sec, condial.profile)
        self.mwin.conmod = 1

    def pop_dialog(self, edit=False):
        global no_edit

        condial = ConProfile(self.sec, self.profile, edit)
        condial.show()
        response = condial.run()
        condial.destroy()
        if no_edit:
            response = Gtk.ResponseType.CANCEL
        return (condial, response)

    def view_edit_profile(self, data):
        (condial, response) = self.pop_dialog()
        errmsg = ''
        if response == Gtk.ResponseType.OK:
            if len(condial.sec) == 0:
                errmsg = _("Missing Profile ID")
            elif len(condial.profile['user']) == 0:
                errmsg = _("Missing User Name")
            elif len(condial.profile['ip']) == 0:
                errmsg = _("Missing Remote Host/IP")
            if len(errmsg) != 0:
                ErrorMesg(errmsg)
                return
                
            if condial.sec != self.sec:
                self.mwin.conini[condial.sec] = {}
            for key in condial.profile.keys():
                self.mwin.conini[condial.sec][key] = condial.profile[key]
            if condial.sec != self.sec:
                self.mwin.conini.remove_section(self.sec)
                self.sec = condial.sec
                self.profile = self.mwin.conini[self.sec]
                self.refresh_label()
            self.mwin.conmod = 1

    def button_clicked(self, widget):
        global proadd
        if self.sec == proadd:
            (condial, response) = self.pop_dialog()
            if response == Gtk.ResponseType.OK:
                self.add_one_profile(condial)
        else:
            remote_connect(self.profile)

    def on_event_press(self, ebox, event):
        global proadd

        if event.button == 1:
            if event.type != Gdk.EventType.DOUBLE_BUTTON_PRESS:
                return
            if self.sec == proadd:
                (condial, response) = self.pop_dialog()
                if response == Gtk.ResponseType.OK:
                    self.add_one_profile(condial)
            else:
                remote_connect(self.profile)
        elif event.button == 3:
            if self.sec != proadd:
                self.menu.show()
                self.menu.popup(None, None, None, None, event.button, event.time)
            else:
                (condial, response) = self.pop_dialog(True)
                if response == Gtk.ResponseType.OK:
                    for key in condial.profile.keys():
                        self.mwin.conini['DEFAULT'][key] = condial.profile[key]
                    self.mwin.conmod = 1

class MWin(Gtk.Window):
    def __init__(self, conini):
        global impath

        super().__init__(title=_("Connection Profiles"))
        self.conini = conini;
        self.conmod = 0

        self.set_icon_from_file(impath + "lproxy-icon.svg")

        vbox = Gtk.VBox()
        vbox.set_homogeneous(False)
        self.add(vbox)
        vbox.show()

        self.hbox = Gtk.Box()
        self.hbox.set_homogeneous(False)
        vbox.pack_start(self.hbox, False, False, 0)
        self.hbox.show()
        
        try:
            pic = self.conini['DEFAULT']['picture']
        except:
            self.conini['DEFAULT']['picture'] = impath + 'user-add.png'
            self.conini['DEFAULT']['proto'] = 'SPICE'
            self.conini['DEFAULT']['port'] = '5900'
            self.conmod = 1

        if not no_edit:
            icon = LIcon(self, proadd)
            self.hbox.pack_start(icon, False, False, 8)
            icon.show()

        for sec in self.conini.sections():
            icon = LIcon(self, sec)
            self.hbox.pack_start(icon, False, False, 8)
            icon.show()
        if no_edit and len(self.conini.sections()) == 0:
            md = Gtk.MessageDialog(flags=0,
                    message_type=Gtk.MessageType.INFO,
                    buttons=Gtk.ButtonsType.OK, text=_("No Connection Profile"))
            md.run()
            md.destroy()
            self.resize(400, 300)

        hbox = Gtk.Box()
        hbox.set_homogeneous(True)
        vbox.pack_end(hbox, False, False, 0)
        hbox.show()

        self.extbut = Gtk.Button(label=_("Exit"))
        self.extbut.connect("clicked", self.on_button_clicked)
        hbox.pack_start(self.extbut, True, True, 0)
        self.extbut.show()

        self.rebbut = Gtk.Button(label=_("Reboot"))
        self.rebbut.connect("clicked", self.on_button_clicked)
        hbox.pack_start(self.rebbut, True, True, 0)
        self.rebbut.show()

        self.shutbut = Gtk.Button(label=_("Shutdown"))
        self.shutbut.connect("clicked", self.on_button_clicked)
        hbox.pack_end(self.shutbut, True, True, 0)
        self.shutbut.show()

    def add_icon(self, sec, profile):
        self.conini[sec] = profile
        icon = LIcon(self, sec)
        self.hbox.pack_start(icon, False, False, 8)
        icon.show()

    def remove_icon(self, icon):
        self.conini.remove_section(icon.sec)
        self.hbox.remove(icon)
        icon.destroy()

    def on_button_clicked(self, widget):
        global noquit

        if widget == self.rebbut:
            act = "--reboot"
        elif widget == self.shutbut:
            act = "--halt"
        elif widget == self.extbut:
            if noquit:
                act = "--logout"
            else:
                act = "--exit"
        Gtk.main_quit()
        if act == "--exit":
            return
        try:
            subprocess.Popen(["xfce4-session-logout", act], start_new_session=True)
        except:
            print("Cannot execute the command: xfce4-session-logout")

try:
    opts, args = getopt.getopt(sys.argv[1:], "c:m", ["config=", "maximize", "no-quit"])
except getopt.GetoptError:
    print("Usage: {} [--maximize] [--config=config_file] [--no-quit]".format(sys.argv[0]))
    sys.exit(1)

exefile = sys.argv[0]
if os.path.islink(exefile):
    impath = os.getcwd() + '/debpot' + impath

confile = os.environ['HOME'] + '/connections.ini'
maximize = False
noquit = False
for optval in opts:
    if optval[0] == '-m' or optval[0] == '--maximize':
        maximize = True
    elif optval[0] == '-c' or optval[0] == '--config':
        confile = optval[1]
    elif optval[0] == '--no-quit':
        noquit = True
        no_edit = True
    
conini = configparser.ConfigParser()
if os.path.isfile(confile):
    conini.read(confile)

def stop_quit(widget, event):
    return True

class UIThread(threading.Thread):
    def __init__(self, win):
        global maximize

        self.win = win
        super().__init__(target=Gtk.main)
        if maximize:
            win.fullscreen()
        win.show()

win = MWin(conini)
if noquit:
    win.connect("delete-event", stop_quit)
else:
    win.connect("destroy", Gtk.main_quit)

ui = UIThread(win)
ui.start()

alv = ui.is_alive()
while alv and global_exit == 0:
    time.sleep(0.2)
    alv = ui.is_alive()
if global_exit == 0:
    ui.join()

if win.conmod != 0:
    with open(confile, 'w') as inif:
        conini['DEFAULT']['picture'] = impath + 'user-add.png'
        conini.write(inif)

sys.exit(0)
