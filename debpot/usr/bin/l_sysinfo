#!/usr/bin/python3
#
import sys
import gi
import locale
locale.setlocale(locale.LC_ALL, '')
import gettext
_ = gettext.gettext

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib

import os.path

import time
import threading
from datetime import datetime
import socket
import fcntl
import struct

class MDateTime(threading.Thread):
    def __init__(self, win):
        super().__init__()
        self.now = datetime.now()
        self.win = win
        self.stop = 0

    def run(self):
        while self.stop == 0:
            time.sleep(1)
            self.now = datetime.now()
            GLib.idle_add(self.win.refresh_clock, self.now.ctime())

    def ok_done(self):
        self.stop = 1

host_name_file = '/etc/hostname'
os_file = '/etc/os-release'
mem_file = '/proc/meminfo'
cpu_file = '/proc/cpuinfo'
net_dir = '/sys/class/net/'

def get_nic_ip(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    ipa = fcntl.ioctl(s.fileno(), 0x8915, struct.pack('64s', ifname.encode('utf-8')))[20:24]
    return socket.inet_ntoa(ipa)

def netinfo():
    netports = []
    for netlink in os.listdir(net_dir):
        netport = os.path.realpath(net_dir+netlink)
        if netport.find('virtual') > -1:
            continue

        wired = 1
        mack = ''
        upl = 0
        ipa = ''
        for prop in os.listdir(netport):
            if prop == 'wireless':
                wired = 0
            if prop == 'address':
                with open(netport+'/address', 'r') as fin:
                    mac = fin.readline().rstrip('\n')
            if prop == 'operstate':
                with open(netport+'/operstate', 'r') as fin:
                    updown = fin.readline().rstrip('\n')
                    if updown == 'up':
                        upl = 1
                        ipa = get_nic_ip(netlink)
        netports.append((os.path.basename(netport), mac, wired, upl, ipa))

    return netports

def hostname():
    if not os.path.isfile(host_name_file):
        return ''
    with open(host_name_file, "r") as fin:
        line = fin.readline()
    return line.rstrip('\n')

def osname():
    if not os.path.isfile(os_file):
        return oinf
    with open(os_file, 'r') as fin:
        for line in fin:
            if line.find("PRETTY_NAME") > -1:
                break
    osdesc = line.split('=')[1]
    return osdesc.strip('"').rstrip('\n').rstrip('"')

def memsize():
    if not os.path.isfile(mem_file):
        return 0
    with open(mem_file, "r") as fin:
        for line in fin:
            if line.find("MemTotal") == 0:
                break
    mems = line.split()
    skb = int(mems[1])
    return int((skb - 1)/(1024*1024)) + 1

def cpuinfo():
    aimp = {0x41: 'ARM'}
    aarch = {8: 'AArch64'}
    apart = {0xd08: 'Cortex-A72', 0xd03: 'Cortex-A53', 0xd07: 'Cortex-A57'}

    def same_cpu(cpu1, cpu2):
        if len(cpu1) != len(cpu2):
            return False

        equal = True
        for key in cpu1.keys():
            if key.find('processor') != -1 or key.find('apicid') != -1 \
                    or key.find('cpu MHz') != -1 or key.find('core id') != -1 \
                    or key.find('siblings') != -1 or key.find('cpu cores') != -1:
                continue

            try:
                if cpu1[key] != cpu2[key]:
#                    print("Key: {}. Not Equal: {}---{}".format(key, cpu1[key], cpu2[key]))
                    equal = False
                    break
            except:
                equal = False
                break
        return equal


    cinfo = []
    with open(cpu_file, 'r') as fin:
        ncpu = {}
        for line in fin:
            if len(line.rstrip('\n')) == 0:
                if len(ncpu) > 0:
                    cinfo.append(ncpu)
                    ncpu = {}
                continue

            rec = line.rstrip('\n').split(': ')
            while len(rec[0]) > 0 and rec[0][-1] == '\t':
                rec[0] = rec[0].rstrip('\t')
            if len(rec[0]) > 0 and len(rec) > 1:
                ncpu[rec[0]] = rec[1]

    pcpu = {}
    numc = 0
    sorted_cinfo = []
    for cpu in cinfo:
        if not same_cpu(cpu, pcpu):
            if numc > 0:
                sorted_cinfo.append((pcpu, numc))
            pcpu = cpu
            numc = 1
        else:
            numc += 1
    if numc > 0:
        sorted_cinfo.append((pcpu, numc))

    cpu_infos = []
    for cpu_tup in sorted_cinfo:
        cpu_keys = cpu_tup[0].keys()
        if 'model name' in cpu_keys:
            cpu_infos.append((cpu_tup[0]['model name'], cpu_tup[1]))
            continue
        if 'CPU implementer' in cpu_keys:
            for key, val in cpu_tup[0].items():
                if key == 'CPU implementer':
                    c_vendor = aimp[int(val, 0)]
                if key == 'CPU architecture':
                    c_arch = aarch[int(val, 0)]
                if key == 'CPU part':
                    c_model = apart[int(val, 0)]
                if key == 'CPU revision':
                    c_rev = int(val, 0)
        cpu_infos.append((c_vendor+' '+c_arch+' '+c_model+' '+'Rev '+str(c_rev), cpu_tup[1]))
    return cpu_infos

class SYSInfo:
    def __init__(self):
        self.hostname = hostname()
        self.osname = osname()
        self.memsize = str(memsize())+' GiB'
        self.cpuinfo = cpuinfo()
        self.netinfo = netinfo()

class MWindow(Gtk.Window):
    def __init__(self, sysinfo):
        super().__init__()
        self.set_border_width(2)
        self.set_default_size(400, 200)

        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = _("System Info")
        self.set_titlebar(hb)

        mvbox = Gtk.VBox()
        mvbox.set_homogeneous(False)
        mvbox.show()
        self.add(mvbox)

        grid = Gtk.Grid()
        grid.show()
        grid.set_column_homogeneous(False)
        mvbox.pack_start(grid, True, True, 0)

        hname_label = Gtk.Label(label=_("Hostname: "))
        hname_label.set_xalign(1.0)
        hname_label.show()
        grid.attach(hname_label, 0, 0, 1, 1)
        hname_content = Gtk.Entry(text=sysinfo.hostname)
        hname_content.set_editable(False)
        hname_content.show()
        grid.attach(hname_content, 1, 0, 1, 1)

        os_label = Gtk.Label(label=_("OS Type: "))
        os_label.set_xalign(1.0)
        os_label.show()
        grid.attach(os_label, 2, 0, 1, 1)
        os_name = Gtk.Entry(text=sysinfo.osname)
        os_name.set_width_chars(25)
        os_name.set_editable(False)
        os_name.show()
        grid.attach(os_name, 3, 0, 1, 1)

        mem_label = Gtk.Label(label=_("Memory Size: "))
        mem_label.set_xalign(1.0)
        mem_label.show()
        grid.attach(mem_label, 0, 1, 1, 1)
        mem_size = Gtk.Entry(text=sysinfo.memsize)
        mem_size.set_editable(False)
        mem_size.show()
        grid.attach(mem_size, 1, 1, 1, 1)
        date_label = Gtk.Label(label=_("Date Time: "))
        date_label.show()
        grid.attach(date_label, 2, 1, 1, 1)
        self.date_disp = Gtk.Entry(text=datetime.now().ctime())
        self.date_disp.set_editable(False)
        self.date_disp.show()
        grid.attach(self.date_disp, 3, 1, 1, 1)

        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        mvbox.pack_start(hseparator, True, True, 0)

        grid = Gtk.Grid()
        grid.show()
        grid.set_column_homogeneous(False)
        mvbox.pack_start(grid, True, True, 0)

        nic_label = Gtk.Label(_("Nic Port"))
        nic_label.show()
        grid.attach(nic_label, 0, 0, 1, 1)
        mac_label = Gtk.Label(_("Mac Addr"))
        mac_label.show()
        grid.attach(mac_label, 1, 0, 1, 1)
        wir_label = Gtk.Label(_("WIFI"))
        wir_label.show()
        grid.attach(wir_label, 2, 0, 1, 1)
        upd_label = Gtk.Label(_("Up/Down"))
        upd_label.show()
        grid.attach(upd_label, 3, 0, 1, 1)
        ip_label = Gtk.Label(_("IP Address"))
        ip_label.show()
        grid.attach(ip_label, 4, 0, 1, 1)

        nrow = 1

        for nic, mac, wired, updown, ip in sysinfo.netinfo:
            nic_label = Gtk.Entry(text=nic)
            nic_label.set_width_chars(8)
            nic_label.set_editable(False)
            nic_label.show()
            grid.attach(nic_label, 0, nrow, 1, 1)
            mac_label = Gtk.Entry(text=mac)
            mac_label.set_width_chars(18)
            mac_label.set_editable(False)
            mac_label.show()
            grid.attach(mac_label, 1, nrow, 1, 1)
            wir_label = Gtk.Entry()
            wir_label.set_width_chars(6)
            wir_label.set_editable(False)
            wir_label.show()
            grid.attach(wir_label, 2, nrow, 1, 1)
            if wired == 1:
                wir_label.set_text(_("Wired"))
            else:
                wir_label.set_text(_("Wifi"))
            upd_label = Gtk.Entry()
            upd_label.set_width_chars(6)
            upd_label.set_editable(False)
            upd_label.show()
            grid.attach(upd_label, 3, nrow, 1, 1)
            if updown == 1:
                upd_label.set_text(_("Up"))
            else:
                upd_label.set_text(_("Down"))
            ip_label = Gtk.Entry(text=ip)
            ip_label.set_width_chars(13)
            ip_label.set_editable(False)
            ip_label.show()
            grid.attach(ip_label, 4, nrow, 1, 1)

            nrow += 1

        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        hseparator.show()
        mvbox.pack_start(hseparator, True, True, 0)

        grid = Gtk.Grid()
        grid.show()
        grid.set_column_homogeneous(False)
        mvbox.pack_start(grid, True, True, 0)

        l_cpumod = Gtk.Label(_("CPU Model"))
        l_cpumod.set_width_chars(40)
        l_cpumod.show()
        grid.attach(l_cpumod, 1, 0, 1, 1)
        l_cpunum = Gtk.Label(_("Count"))
        l_cpunum.show()
        grid.attach(l_cpunum, 2, 0, 1, 1)

        ih = 1
        for cinfo, num in sysinfo.cpuinfo:
            info_label = Gtk.Entry(text=cinfo)
            info_label.set_width_chars(34)
            info_label.set_editable(False)
            info_label.show()
            grid.attach(info_label, 1, ih, 1, 1)
            num_label = Gtk.Entry(text=str(num))
            num_label.set_width_chars(3)
            num_label.set_editable(False)
            grid.attach(num_label, 2, ih, 1, 1)
            ih += 1

        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        grid.attach(hseparator, 0, nrow+ih, 2, 1)

        img = Gtk.Image()
        img.set_from_file("./sysinfo-side.png")
        grid.attach(img, 0, 0, 1, 1)

        hbox = Gtk.Box()
        hbox.set_homogeneous(False)
        hbox.show()
        mvbox.pack_end(hbox, True, True, 0) 
        ver = Gtk.Label(label=_("Version: "))
        hbox.pack_start(ver, False, False, 0)
        lic = Gtk.Label(label=_("VDI Connector Proxy v3.7"))
        lic.show()
        hbox.pack_start(lic, True, True, 0)

        self.set_position(Gtk.WindowPosition.CENTER)

    def refresh_clock(self, dt):
        self.date_disp.set_text(dt)

if __name__ == '__main__':
    netinfo()
    minfo = SYSInfo()
    win = MWindow(minfo)
    win.connect("destroy", Gtk.main_quit)
    win.show_all()

    watch = MDateTime(win)
    watch.start()

    Gtk.main()

    watch.ok_done()
    watch.join()

    sys.exit(0)
